/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xiicps.h"
#define SOM_IIC_SCLK_RATE 100000
#define IIC_TH_ADDR 0x40

XIicPs_Config* IicPs_Config;


int main()
{
	XIicPs* iic;
    init_platform();
    unsigned short temp = 0;
    double t_out, h_out;
    char command_t = 0xe3;
    char command_h = 0xe5;
    char t_data[2];
    char h_data[2];
    int status;
    status = Init_I2C(iic, IicPs_Config);
    while(1){
    	XIicPs_MasterSendPolled(iic, &command_t, 1, IIC_TH_ADDR);
    	XIicPs_MasterRecvPolled(iic0ps, t_data, 2, IIC_TH_ADDR);
    	temp = (t_data[0] << 8) | (t_data[1] & 0xfc);
    	t_out = temp * 175.72 / 65536 - 46.85;

    	XIicPs_MasterSendPolled(iic0ps, &command_h, 1, IIC_TH_ADDR);
    	XIicPs_MasterRecvPolled(iic0ps, h_data, 2, IIC_TH_ADDR);

    }
    cleanup_platform();
    return 0;
}


int Init_I2C(XIicPs* iic, XIicPs_Config* IicPs_0_Config){
	int status;
	IicPs_0_Config = XIicPs_LookupConfig(0);
	if(NULL == IicPs_0_Config){
		return XST_FAILURE;
	}

	status = XIicPs_CfgInitialize(iic, IicPs_0_Config, IicPs_0_Config->BaseAddress);
	if(status != XST_SUCCESS){
		return XST_FAILURE;
	}

	status = XIicPs_SetSClk(iic, SOM_IIC_SCLK_RATE);
	if(status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	return status;
}
