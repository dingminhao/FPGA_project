/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xiicps.h"
#include "xparameters.h"

#define IIC_DEVICE_ID XPAR_PS7_I2C_0_DEVICE_ID
#define IIC_RATE 100000
#define IIC_SLV_ADDR 0x40

static XIicPs IicPs;
static XIicPs_Config * IicPsCfgPtr;
//initial iic
int initIicPs(XIicPs *iicps , XIicPs_Config * iiccfg);
//avg filter
double avgfilter(double * srcDataPtr,double inData,int count);

int main()
{
	int status;
    status = initIicPs(&IicPs,IicPsCfgPtr);
    if(status != XST_SUCCESS){
    			return	XST_FAILURE;
    }

    char CmdHum = 0xE5;
    char CmdTemp =0xE3;
    char Hdata[2];
    char Tdata[2];
    double Tout,Hout;
    double avgdata[4];
    avgdata[0]=0;
    avgdata[1]=0;
    avgdata[2]=0;
    avgdata[3]=0;
    unsigned short tmp =0;
    while(1){
		//read temp value
		status = XIicPs_MasterSendPolled(&IicPs,&CmdTemp,0x01,IIC_SLV_ADDR);
		if(status != XST_SUCCESS){
						return	XST_FAILURE;
		}
		status = XIicPs_MasterRecvPolled(&IicPs,Tdata,0x02,IIC_SLV_ADDR);
		//read hum value
		status = XIicPs_MasterSendPolled(&IicPs,&CmdHum,0x01,IIC_SLV_ADDR);
		if(status != XST_SUCCESS){
						return	XST_FAILURE;
		}
		status = XIicPs_MasterRecvPolled(&IicPs,Hdata,0x02,IIC_SLV_ADDR);
		tmp = (Tdata[0]<<8) | (Tdata[1]&0xfc);
		Tout = (175.72*tmp/65536)-46.85;
		tmp =(Hdata[0]<<8) | (Hdata[1]&0xfe);
		Hout = ((125*tmp)/65536) - 6;
		Tout = avgfilter(avgdata,Tout,0x04);
		printf("Humidity = %.1f; temperature = %.1f \n",Hout,Tout);
		usleep(1000000);
    }
    return 0;
}

int initIicPs(XIicPs *iicps , XIicPs_Config * iiccfg){
	int status;
	iiccfg = XIicPs_LookupConfig(IIC_DEVICE_ID);
	status = XIicPs_CfgInitialize(iicps,iiccfg,iiccfg->BaseAddress);
	if(status != XST_SUCCESS){
		return	XST_FAILURE;
	}
	//set iic rate
	status = XIicPs_SetSClk(iicps,IIC_RATE);
	if(status != XST_SUCCESS){
			return	XST_FAILURE;
	}
	return XST_SUCCESS;
}

double avgfilter(double * srcDataPtr,double inData,int count){
	int i;
	double outdata;
	for(i=0;i<count;i++){
		if(i <(count-1)){
			srcDataPtr[i+1]=srcDataPtr[i];
		}
	}
	srcDataPtr[0] =inData;
	outdata = (srcDataPtr[0] + srcDataPtr[1] + srcDataPtr[2] +srcDataPtr[3])/4;
	return outdata;
}



