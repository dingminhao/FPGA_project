
/***************************** Include Files ********************************/

#include "xparameters.h"
#include "xgpiops.h"
#include "xstatus.h"
#include "xplatform_info.h"
#include <xil_printf.h>

/************************** Constant Definitions ****************************/

#define GPIO_DEVICE_ID  	XPAR_XGPIOPS_0_DEVICE_ID

#define printf			xil_printf	/* Smalller foot-print printf */

#define LED0 54
#define LED1 55
#define SW1  56
static int GpioOutputExample(void);
static int GpioInputExample(u32 *DataRead);
int GpioPolledExample(u16 DeviceId, u32 *DataRead);

XGpioPs Gpio;	/* The driver instance for GPIO Device. */

static XGpioPs GpioPs;
static XGpioPs_Config * GpioCnfPtr;
int main(void)
{
	initGpio();
	int i,j;
	int led=1;
	while(1){
		for(i=0;i<1000;i++){
			for(j=0;j<1000;j++){
				usleep(1);
				if(j<i){
					XGpioPs_WritePin(&GpioPs,LED0,led);
				}
				else{
					XGpioPs_WritePin(&GpioPs,LED0,~led);
				}

			}
		}
		led = ~led;
	}
    print("Hello World\n\r");
    return 0;
}


int initGpio(){
	int status;
	GpioCnfPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
	status = XGpioPs_CfgInitialize(&GpioPs,GpioCnfPtr,GpioCnfPtr->BaseAddr);
	if(status != XST_SUCCESS){
		return	status;
	}
	XGpioPs_SetDirectionPin(&GpioPs,LED0,0x01);
	XGpioPs_SetDirectionPin(&GpioPs,LED1,0x01);
	XGpioPs_SetOutputEnablePin(&GpioPs,LED0,0x01);
	XGpioPs_SetOutputEnablePin(&GpioPs,LED1,0x01);
	XGpioPs_SetDirectionPin(&GpioPs,SW1,0x00);//input for button
	XGpioPs_SetOutputEnablePin(&GpioPs,LED1,0x00);
}
