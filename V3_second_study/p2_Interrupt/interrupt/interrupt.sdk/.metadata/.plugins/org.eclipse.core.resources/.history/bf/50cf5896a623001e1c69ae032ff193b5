
/***************************** Include Files ********************************/

#include "xparameters.h"
#include "xgpiops.h"
#include "xstatus.h"
#include "xplatform_info.h"
#include <xil_printf.h>

/************************** Constant Definitions ****************************/

#define GPIO_DEVICE_ID  	XPAR_XGPIOPS_0_DEVICE_ID

#define printf			xil_printf	/* Smalller foot-print printf */

#define LED0 54
#define LED1 55
#define SW1  56
static int GpioOutputExample(void);
static int GpioInputExample(u32 *DataRead);
int GpioPolledExample(u16 DeviceId, u32 *DataRead);

XGpioPs Gpio;	/* The driver instance for GPIO Device. */


int main(void)
{
	int Status;
	u32 InputData;

	Status = GpioPolledExample(GPIO_DEVICE_ID, &InputData);
	if (Status != XST_SUCCESS) {
		printf("GPIO Polled Mode Example Test Failed\r\n");
		return XST_FAILURE;
	}

	printf("Data read from GPIO Input is  0x%x \n\r", (int)InputData);
	printf("Successfully ran GPIO Polled Mode Example Test\r\n");
	return XST_SUCCESS;
}


int GpioPolledExample(u16 DeviceId, u32 *DataRead)
{
	int Status;
	XGpioPs_Config *ConfigPtr;
	initGpio();
	/* Initialize the GPIO driver. */
	ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
	Status = XGpioPs_CfgInitialize(&Gpio, ConfigPtr,ConfigPtr->BaseAddr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/* Run the Output Example. */
	XGpioPs_SetDirectionPin(&Gpio, Output_Pin0, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, Output_Pin0, 1);
	XGpioPs_SetDirectionPin(&Gpio, Output_Pin1, 1);
	XGpioPs_SetOutputEnablePin(&Gpio, Output_Pin1, 1);
	XGpioPs_WritePin(&Gpio, Output_Pin0, 0x1);
	XGpioPs_WritePin(&Gpio, Output_Pin1, 0x1);
	XGpioPs_SetDirectionPin(&Gpio, Input_Pin, 0);
	printf("GPIO_state : %d\n", XGpioPs_ReadPin(&Gpio, Output_Pin0));
	while(1){
		if(XGpioPs_ReadPin(&Gpio, Input_Pin) == 0){
			XGpioPs_WritePin(&Gpio, Output_Pin0, 0x1);
			XGpioPs_WritePin(&Gpio, Output_Pin1, 0x1);
			usleep(1000000);
		} else {
			XGpioPs_WritePin(&Gpio, Output_Pin0, 0);
			XGpioPs_WritePin(&Gpio, Output_Pin1, 0);
			usleep(1000000);
		}

	}
	return XST_SUCCESS;
}
static XGpioPs GpioPs;
static XGpioPs_Config * GpioCnfPtr;
int initGpio(){
	int status;
	GpioCnfPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
	status = XGpioPs_CfgInitialize(&GpioPs,GpioCnfPtr,GpioCnfPtr->BaseAddr);
	if(status != XST_SUCCESS){
		return	status;
	}
	XGpioPs_SetDirectionPin(&GpioPs,LED0,0x01);
	XGpioPs_SetDirectionPin(&GpioPs,LED1,0x01);
	XGpioPs_SetOutputEnablePin(&GpioPs,LED0,0x01);
	XGpioPs_SetOutputEnablePin(&GpioPs,LED1,0x01);
	XGpioPs_SetDirectionPin(&GpioPs,Input_Pin,0x00);//input for button
	XGpioPs_SetOutputEnablePin(&GpioPs,LED1,0x00);
}
