/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xspips.h"
#include "xparameters.h"
#include "xgpiops.h"
#include "imx222.h"
static XSpiPs Spips;
static XSpiPs_Config * SpipsCfgPtr;
#define GPIO_DEV_ID XPAR_PS7_GPIO_0_DEVICE_ID
#define SPI_DEV_ID XPAR_XSPIPS_0_DEVICE_ID
static XGpioPs GpioPs;
static XGpioPs_Config * GpioCnfPtr;


// initial SPI interface
#define CMOS_RST 54
int initSPI();
int initGpio();

int main()
{
    initSPI();
    initGpio();
    XGpioPs_WritePin(&GpioPs, CMOS_RST, 0x00); //实现手动复位信号
    usleep(1);
    XGpioPs_WritePin(&GpioPs, CMOS_RST, 0x01);
    return 0;
}

int initSPI(){
	int Status;
	SpipsCfgPtr = XSpiPs_LookupConfig(SPI_DEV_ID);
	Status = XSpiPs_CfgInitialize(&Spips, SpipsCfgPtr, SpipsCfgPtr->BaseAddress);
	if(Status != XST_SUCCESS){
		print("error\n");
		return Status;
	}
	Status = XSpiPs_SetOptions(&Spips, XSPIPS_FORCE_SSELECT_OPTION | XSPIPS_MASTER_OPTION);
	Status = XSpiPs_SetClkPrescaler(&Spips, XSPIPS_CLK_PRESCALE_32);
	Status = XSpiPs_SetSlaveSelect(&Spips, 0);
	return Status;
}


int initGpio(){
	int status;
	GpioCnfPtr = XGpioPs_LookupConfig(GPIO_DEV_ID);
	status = XGpioPs_CfgInitialize(&GpioPs,GpioCnfPtr,GpioCnfPtr->BaseAddr);
	if(status != XST_SUCCESS){
		return	status;
	}
	XGpioPs_SetDirectionPin(&GpioPs,CMOS_RST,0x01);
	XGpioPs_SetOutputEnablePin(&GpioPs,CMOS_RST,0x01);
}
