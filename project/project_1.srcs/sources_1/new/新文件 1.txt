`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////


module conv1(
        input           	clk,
        input           	rst_n,
        
        input   [8-1:0] 	data_in,
        input           	data_in_valid,
        
        output  [6*32-1:0] 	data_out,
        output      reg    	data_out_valid
    );

genvar k;







//======================= addr ===============================
reg [4:0]   wr_addr;
reg [4:0]   rd_addr;
wire    [4:0] rd_addr_pre2 = wr_addr +2;
always@(posedge clk,negedge rst_n)begin
    if(~rst_n)begin
        wr_addr<=0;
        rd_addr<=0;
    end
    else if(    data_in_valid == 1'b1    )begin
        //========== A ============
        if(wr_addr =='d27)
            wr_addr <= 5'd0;
        else
            wr_addr <= wr_addr + 1'd1;
        //========== B ============
        if(rd_addr_pre2 > 'd27)
            rd_addr <= rd_addr_pre2 - 5'd28;
        else
            rd_addr <= rd_addr_pre2;
    end
end


//======================= data ===============================
wire    [7:0]   window_in	[0:5-1];
wire    [7:0]   window_out	[0:5-1];
assign  window_in[0] = data_in;
generate 
for(k=1;k<5;k=k+1)begin
   assign    window_in[k]=window_out[k-1];
end
endgenerate


generate
for (k=0;k<5;k=k+1)begin
gray_linebuffer gray_linebuffer_U (
  .clka		(clk),    			// input wire clka
  .wea		(data_in_valid),    // input wire [0 : 0] wea
  .addra	(wr_addr),  		// input wire [4 : 0] addra
  .dina		(window_in[k]),    	// input wire [7 : 0] dina
  
  .clkb		(clk),    			// input wire clkb
  .enb		(1'b1),      		// input wire enb
  .addrb	(rd_addr),  		// input wire [4 : 0] addrb
  .doutb	(window_out[k])  	// output wire [7 : 0] doutb
);
end
endgenerate

//======================= window ===============================
reg signed [8:0] window[5-1:0][5-1:0];
integer i,j;
always@(posedge clk ,negedge rst_n)begin
    if(~rst_n)begin
        for(i=0;i<5;i=i+1)begin
            for(j=0;j<5;j=j+1)begin
                window[i][j]<=0;
            end
        end
    end
    else if(data_in_valid==1'b1 )begin
        for(i=0;i<5;i=i+1)begin
            window[i][0] <= window_in[i];
            for(j=1;j<5;j=j+1)begin
                window[i][j]<=window[i][j-1];
            end
        end
    end
end

//======================= x_cnt y_cnt ====================
reg [4:0] x_cnt;
reg [4:0] y_cnt;

always@(posedge clk,negedge rst_n)begin
    if(~rst_n)
        x_cnt<=0;
    else if(x_cnt == 5'd27 && data_in_valid==1'b1)
        x_cnt<=0;
    else if(data_in_valid==1'b1)
        x_cnt<= x_cnt +1'b1;
end

always@(posedge clk,negedge rst_n)begin
    if(~rst_n)
        y_cnt<=0;
    else if(y_cnt == 5'd27 &&x_cnt == 5'd27 && data_in_valid==1'b1)
        y_cnt<=0;
    else if(data_in_valid==1'b1 && x_cnt == 5'd27)
        y_cnt<= y_cnt +1'b1;
end

//======================= weights =======================
wire c1_w_rd_en;
assign  c1_w_rd_en = (data_in_valid && x_cnt>=0 && y_cnt==0)? 1'b1 : 1'b0;


wire    [15:0] rd_c1_w_1_data;
wire    [15:0] rd_c1_w_2_data;
wire    [15:0] rd_c1_w_3_data;
wire    [15:0] rd_c1_w_4_data;
wire    [15:0] rd_c1_w_5_data;
wire    [15:0] rd_c1_w_6_data;
wire    [15:0] rd_c1_b_data;








endmodule
